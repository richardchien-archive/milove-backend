# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-27 11:43
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import milove.shop.models.goods
import milove.shop.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and ./+/-/_ only.', max_length=150, unique=True, validators=[milove.shop.validators.UsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'attachment',
                'verbose_name_plural': 'attachments',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'brand',
                'verbose_name_plural': 'brands',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('super_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='shop.Category', verbose_name='super category')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.FloatField(verbose_name='total price')),
                ('status', models.CharField(choices=[('unpaid', 'OrderStatus|unpaid'), ('paid', 'OrderStatus|paid'), ('shipping', 'OrderStatus|shipping'), ('done', 'OrderStatus|done'), ('canceled', 'OrderStatus|canceled')], default='unpaid', max_length=20, verbose_name='status')),
                ('payment_method', models.CharField(choices=[('balance', 'PaymentMethod|balance'), ('paypal', 'PaymentMethod|paypal'), ('stripe', 'PaymentMethod|stripe')], max_length=20, verbose_name='payment method')),
                ('use_balance', models.BooleanField(verbose_name='Order|use balance')),
                ('from_balance', models.FloatField(verbose_name='Order|from balance')),
            ],
            options={
                'verbose_name': 'order',
                'verbose_name_plural': 'orders',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(verbose_name='strike price')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='shop.Order', verbose_name='order')),
            ],
            options={
                'verbose_name': 'order item',
                'verbose_name_plural': 'order items',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publish_dt', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Product|publish datetime')),
                ('sold', models.BooleanField(default=False, verbose_name='Product|sold')),
                ('sold_dt', models.DateTimeField(blank=True, null=True, verbose_name='Product|sold datetime')),
                ('name', models.CharField(blank=True, max_length=200, verbose_name='Product|name')),
                ('style', models.CharField(blank=True, max_length=200, verbose_name='Product|style')),
                ('size', models.CharField(blank=True, max_length=20, verbose_name='Product|size')),
                ('condition', models.CharField(choices=[('S', 'ProductCondition|S'), ('A+', 'ProductCondition|A+'), ('A', 'ProductCondition|A'), ('B', 'ProductCondition|B'), ('C', 'ProductCondition|C'), ('D', 'ProductCondition|D')], max_length=2, verbose_name='Product|condition')),
                ('description', models.TextField(blank=True, verbose_name='Product|description')),
                ('original_price', models.FloatField(verbose_name='Product|original price')),
                ('buy_back_price', models.FloatField(blank=True, null=True, verbose_name='Product|buy back price')),
                ('price', models.FloatField(verbose_name='Product|price')),
                ('main_image', models.ImageField(default='products/placeholder-120x120.png', upload_to=milove.shop.models.goods._prod_image_path, verbose_name='Product|main image')),
                ('attachments', models.ManyToManyField(blank=True, to='shop.Attachment', verbose_name='Product|attachments')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.Brand', verbose_name='Product|brand')),
                ('categories', models.ManyToManyField(blank=True, related_name='products', to='shop.Category', verbose_name='Product|categories')),
            ],
            options={
                'verbose_name': 'product',
                'verbose_name_plural': 'products',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=milove.shop.models.goods._prod_image_path, verbose_name='image')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='shop.Product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'product image',
                'verbose_name_plural': 'product images',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='info', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('balance', models.FloatField(default=0.0, verbose_name='UserInfo|balance')),
                ('point', models.IntegerField(default=0, verbose_name='UserInfo|point')),
                ('contact', jsonfield.fields.JSONField(blank=True, default={}, help_text=' ', verbose_name='UserInfo|contact')),
            ],
            options={
                'verbose_name': 'user information',
                'verbose_name_plural': 'user information',
            },
        ),
        migrations.AddField(
            model_name='orderitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shop.Product', verbose_name='product'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
